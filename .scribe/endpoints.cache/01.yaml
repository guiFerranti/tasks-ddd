## Autogenerated by Scribe. DO NOT MODIFY.

name: Usuários
description: |-

  Endpoints para gerenciamento de usuários (CRUD, alteração de senha).
endpoints:
  -
    httpMethods:
      - POST
    uri: api/users
    metadata:
      groupName: Usuários
      groupDescription: |-

        Endpoints para gerenciamento de usuários (CRUD, alteração de senha).
      subgroup: ''
      subgroupDescription: ''
      title: 'Registrar Novo Usuário'
      description: 'Cria um novo usuário com role padrão "user".'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'Nome completo.'
        required: true
        example: 'João Silva'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      email:
        name: email
        description: 'Email válido.'
        required: true
        example: joao@exemplo.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      cpf:
        name: cpf
        description: 'CPF (formato: 123.456.789-00).'
        required: true
        example: 123.456.789-00
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password:
        name: password
        description: 'Senha (mínimo 6 caracteres).'
        required: true
        example: senha123
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password_confirmation:
        name: password_confirmation
        description: 'Confirmação da senha.'
        required: true
        example: senha123
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      name: 'João Silva'
      email: joao@exemplo.com
      cpf: 123.456.789-00
      password: senha123
      password_confirmation: senha123
    fileParameters: []
    responses:
      -
        status: 201
        content: |-
          {
            "id": 1,
            "name": "João Silva",
            "email": "joao@exemplo.com",
            "cpf": "123.456.789-00",
            "role": "user",
            "created_at": "2024-05-20T00:00:00.000000Z"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 400
        content: |-
          {
            "error": "CPF já cadastrado"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 422
        content: |-
          {
            "errors": {
              "name": ["O campo nome é obrigatório"],
              "email": ["Formato de email inválido"]
            }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/users
    metadata:
      groupName: Usuários
      groupDescription: |-

        Endpoints para gerenciamento de usuários (CRUD, alteração de senha).
      subgroup: ''
      subgroupDescription: ''
      title: 'Listar Todos Usuários (Admin)'
      description: 'Lista todos os usuários registrados (apenas administradores).'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {token}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          [{
            "id": 1,
            "name": "Admin",
            "email": "admin@exemplo.com",
            "role": "admin"
          }]
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
            "error": "Acesso negado: apenas administradores"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/users/{id}'
    metadata:
      groupName: Usuários
      groupDescription: |-

        Endpoints para gerenciamento de usuários (CRUD, alteração de senha).
      subgroup: ''
      subgroupDescription: ''
      title: 'Excluir Usuário (Soft Delete - Admin)'
      description: 'Remove um usuário do sistema (soft delete, apenas administradores).'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {token}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'ID do usuário.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 204
        content: '{}'
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
            "error": "Acesso negado: apenas administradores"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: |-
          {
            "error": "Usuário não encontrado"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
    uri: api/users/password
    metadata:
      groupName: Usuários
      groupDescription: |-

        Endpoints para gerenciamento de usuários (CRUD, alteração de senha).
      subgroup: ''
      subgroupDescription: ''
      title: 'Alterar Senha do Usuário'
      description: 'Atualiza a senha do usuário autenticado.'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {token}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      current_password:
        name: current_password
        description: 'Senha atual.'
        required: true
        example: senha123
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      new_password:
        name: new_password
        description: 'Nova senha (diferente da atual).'
        required: true
        example: novaSenha456
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      current_password: senha123
      new_password: novaSenha456
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "message": "Senha alterada com sucesso"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 401
        content: |-
          {
            "error": "Senha atual incorreta"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
            "error": "Acesso não autorizado"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/users/{id}'
    metadata:
      groupName: Usuários
      groupDescription: |-

        Endpoints para gerenciamento de usuários (CRUD, alteração de senha).
      subgroup: ''
      subgroupDescription: ''
      title: 'Obter Detalhes do Usuário'
      description: 'Retorna os detalhes de um usuário específico.'
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'ID do usuário.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "id": 1,
            "name": "João Silva",
            "email": "joao@exemplo.com",
            "cpf": "123.456.789-00",
            "role": "user",
            "created_at": "2024-05-20T00:00:00.000000Z"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: |-
          {
            "error": "Usuário não encontrado"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
    uri: 'api/users/{id}'
    metadata:
      groupName: Usuários
      groupDescription: |-

        Endpoints para gerenciamento de usuários (CRUD, alteração de senha).
      subgroup: ''
      subgroupDescription: ''
      title: 'Atualizar Usuário'
      description: 'Atualiza informações do usuário (exceto senha).'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {token}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'ID do usuário.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: Nome.
        required: false
        example: 'João Silva Alterado'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      email:
        name: email
        description: Email.
        required: false
        example: novojoao@exemplo.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      cpf:
        name: cpf
        description: CPF.
        required: false
        example: 987.654.321-00
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      name: 'João Silva Alterado'
      email: novojoao@exemplo.com
      cpf: 987.654.321-00
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "id": 1,
            "name": "João Silva Alterado",
            "email": "novojoao@exemplo.com",
            "cpf": "987.654.321-00",
            "role": "user"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
            "error": "Acesso negado: você só pode atualizar seu próprio perfil"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
